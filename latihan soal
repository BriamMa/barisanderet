import React, { useState, useEffect, useCallback } from 'react';

// Main App component
const App = () => {
  // State untuk menyimpan daftar soal untuk sesi saat ini
  const [questions, setQuestions] = useState([]);
  // State untuk melacak indeks soal saat ini
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  // State untuk menyimpan jawaban pengguna
  const [userAnswer, setUserAnswer] = useState('');
  // State untuk menampilkan umpan balik (benar/salah)
  const [feedback, setFeedback] = useState('');
  // State untuk mengontrol visibilitas pembahasan
  const [showSolution, setShowSolution] = useState(false);
  // State untuk melacak apakah semua soal sudah dijawab
  const [quizFinished, setQuizFinished] = useState(false);

  // State untuk fitur Gemini API
  const [customQuestionPrompt, setCustomQuestionPrompt] = useState('');
  const [customGeneratedQuestion, setCustomGeneratedQuestion] = useState(null);
  const [loadingGemini, setLoadingGemini] = useState(false);
  const [geminiError, setGeminiError] = useState('');

  /**
   * Menghasilkan bilangan bulat acak dalam rentang yang ditentukan.
   * @param {number} min - Nilai minimum (inklusif).
   * @param {number} max - Nilai maksimum (inklusif).
   * @returns {number} Bilangan bulat acak.
   */
  const getRandomInt = (min, max) => {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
  };

  /**
   * Menghasilkan satu soal matematika (barisan atau deret aritmatika/geometri).
   * Setiap jenis soal memiliki tingkat kesulitan tertentu.
   * @returns {object} Objek yang berisi question, correctAnswer, solution, dan difficulty.
   */
  const generateQuestion = useCallback(() => {
    const questionTypes = [
      'arithmetic_un_mudah',        // Barisan aritmatika: mencari Un
      'arithmetic_ab_sedang',       // Barisan aritmatika: mencari a atau b dari dua suku
      'geometric_un_mudah',         // Barisan geometri: mencari Un
      'geometric_ar_sedang',        // Barisan geometri: mencari a atau r dari dua suku
      'arithmetic_sn_sedang',       // Deret aritmatika: mencari Sn
      'geometric_sn_sedang',        // Deret geometri: mencari Sn (hingga)
      'geometric_s_inf_sulit',      // Deret geometri: mencari S_infinity
      'word_problem_sulit'          // Soal cerita, konsep campuran
    ];

    const type = questionTypes[getRandomInt(0, questionTypes.length - 1)];
    let question = '';
    let correctAnswer = '';
    let solution = '';
    let difficulty = '';

    switch (type) {
      case 'arithmetic_un_mudah': {
        const a = getRandomInt(2, 10); // Suku pertama
        const b = getRandomInt(1, 5);  // Beda
        const n = getRandomInt(5, 15); // Nomor suku
        const un = a + (n - 1) * b;
        question = `Diketahui barisan aritmatika dengan suku pertama ($a$) ${a} dan beda ($b$) ${b}. Tentukan suku ke-${n} ($U_{${n}}$).`;
        correctAnswer = String(un);
        solution = `Rumus suku ke-n barisan aritmatika adalah $U_n = a + (n-1)b$.\nSubstitusikan $a = ${a}$, $b = ${b}$, dan $n = ${n}$:\n$U_{${n}} = ${a} + (${n}-1) \\times ${b}$\n$U_{${n}} = ${a} + ${n - 1} \\times ${b}$\n$U_{${n}} = ${a} + ${ (n - 1) * b }$\n$U_{${n}} = ${un}$.`;
        difficulty = 'Mudah';
        break;
      }
      case 'arithmetic_ab_sedang': {
        const a = getRandomInt(1, 10);
        const b = getRandomInt(1, 5);
        const n1 = getRandomInt(2, 5);
        const n2 = getRandomInt(6, 10);
        const u1 = a + (n1 - 1) * b;
        const u2 = a + (n2 - 1) * b;
        question = `Suku ke-${n1} suatu barisan aritmatika adalah ${u1} dan suku ke-${n2} adalah ${u2}. Tentukan suku pertama ($a$) dan beda ($b$) barisan tersebut. (Format jawaban: a,b)`;
        correctAnswer = `${a},${b}`;
        solution = `Diketahui:\n$U_{${n1}} = a + (${n1}-1)b = ${u1}$ (Persamaan 1)\n$U_{${n2}} = a + (${n2}-1)b = ${u2}$ (Persamaan 2)\n\nKurangkan Persamaan 1 dari Persamaan 2:\n$(a + (${n2}-1)b) - (a + (${n1}-1)b) = ${u2} - ${u1}$\n$(${n2}-1 - (${n1}-1))b = ${u2 - u1}$\n$(${n2 - n1})b = ${u2 - u1}$\n$b = \\frac{${u2 - u1}}{${n2 - n1}} = ${b}$\n\nSubstitusikan $b = ${b}$ ke Persamaan 1:\n$a + (${n1}-1) \\times ${b} = ${u1}$\n$a + ${ (n1 - 1) * b } = ${u1}$\n$a = ${u1} - ${ (n1 - 1) * b } = ${a}$\n\nJadi, suku pertama ($a$) adalah ${a} dan beda ($b$) adalah ${b}$.`;
        difficulty = 'Sedang';
        break;
      }
      case 'geometric_un_mudah': {
        const a = getRandomInt(1, 5);
        const r = getRandomInt(2, 3); // Jaga rasio tetap kecil untuk angka yang mudah diatur
        const n = getRandomInt(3, 7);
        const un = a * Math.pow(r, n - 1);
        question = `Diketahui barisan geometri dengan suku pertama ($a$) ${a} dan rasio ($r$) ${r}. Tentukan suku ke-${n} ($U_{${n}}$).`;
        correctAnswer = String(un);
        solution = `Rumus suku ke-n barisan geometri adalah $U_n = a \\cdot r^{n-1}$.\nSubstitusikan $a = ${a}$, $r = ${r}$, dan $n = ${n}$:\n$U_{${n}} = ${a} \\cdot ${r}^{${n}-1}$\n$U_{${n}} = ${a} \\cdot ${r}^{${n - 1}}$\n$U_{${n}} = ${a} \\cdot ${Math.pow(r, n - 1)}$\n$U_{${n}} = ${un}$.`;
        difficulty = 'Mudah';
        break;
      }
      case 'geometric_ar_sedang': {
        const a = getRandomInt(1, 5);
        const r = getRandomInt(2, 3);
        const n1 = getRandomInt(2, 4);
        const n2 = getRandomInt(5, 7);
        const u1 = a * Math.pow(r, n1 - 1);
        const u2 = a * Math.pow(r, n2 - 1);
        question = `Suku ke-${n1} suatu barisan geometri adalah ${u1} dan suku ke-${n2} adalah ${u2}. Tentukan rasio ($r$) barisan tersebut.`;
        correctAnswer = String(r);
        solution = `Diketahui:\n$U_{${n1}} = a \\cdot r^{${n1}-1} = ${u1}$ (Persamaan 1)\n$U_{${n2}} = a \\cdot r^{${n2}-1} = ${u2}$ (Persamaan 2)\n\nBagi Persamaan 2 dengan Persamaan 1:\n$\\frac{a \\cdot r^{${n2}-1}}{a \\cdot r^{${n1}-1}} = \\frac{${u2}}{${u1}}$\n$r^{(${n2}-1) - (${n1}-1)} = \\frac{${u2}}{${u1}}$\n$r^{${n2 - n1}} = ${u2 / u1}$\n$r = \\sqrt[${n2 - n1}]{${u2 / u1}} = ${r}$.\n\nJadi, rasio ($r$) adalah ${r}$.`;
        difficulty = 'Sedang';
        break;
      }
      case 'arithmetic_sn_sedang': {
        const a = getRandomInt(2, 8);
        const b = getRandomInt(1, 4);
        const n = getRandomInt(5, 10);
        const sn = (n / 2) * (2 * a + (n - 1) * b);
        question = `Tentukan jumlah ${n} suku pertama dari deret aritmatika dengan suku pertama ($a$) ${a} dan beda ($b$) ${b}.`;
        correctAnswer = String(sn);
        solution = `Rumus jumlah n suku pertama deret aritmatika adalah $S_n = \\frac{n}{2} (2a + (n-1)b)$.\nSubstitusikan $a = ${a}$, $b = ${b}$, dan $n = ${n}$:\n$S_{${n}} = \\frac{${n}}{2} (2 \\cdot ${a} + (${n}-1) \\cdot ${b})$\n$S_{${n}} = ${n / 2} ( ${2 * a} + ${n - 1} \\cdot ${b})$\n$S_{${n}} = ${n / 2} ( ${2 * a} + ${ (n - 1) * b })$\n$S_{${n}} = ${n / 2} ( ${2 * a + (n - 1) * b} )$\n$S_{${n}} = ${sn}$.`;
        difficulty = 'Sedang';
        break;
      }
      case 'geometric_sn_sedang': {
        const a = getRandomInt(1, 5);
        const r = getRandomInt(2, 3);
        const n = getRandomInt(3, 6);
        let sn;
        if (r > 1) {
          sn = a * (Math.pow(r, n) - 1) / (r - 1);
        } else { // r < 1
          sn = a * (1 - Math.pow(r, n)) / (1 - r);
        }
        question = `Tentukan jumlah ${n} suku pertama dari deret geometri dengan suku pertama ($a$) ${a} dan rasio ($r$) ${r}.`;
        correctAnswer = String(sn);
        solution = `Rumus jumlah n suku pertama deret geometri adalah $S_n = \\frac{a(r^n - 1)}{r-1}$ (untuk $r > 1$) atau $S_n = \\frac{a(1 - r^n)}{1-r}$ (untuk $r < 1$).\nKarena $r = ${r}$, gunakan rumus $S_n = \\frac{a(r^n - 1)}{r-1}$.\nSubstitusikan $a = ${a}$, $r = ${r}$, dan $n = ${n}$:\n$S_{${n}} = \\frac{${a}(${r}^{${n}} - 1)}{${r}-1}$\n$S_{${n}} = \\frac{${a}(${Math.pow(r, n)} - 1)}{${r - 1}}$\n$S_{${n}} = \\frac{${a} \\cdot ${Math.pow(r, n) - 1}}{${r - 1}}$\n$S_{${n}} = \\frac{${a * (Math.pow(r, n) - 1)}}{${r - 1}}$\n$S_{${n}} = ${sn}$.`;
        difficulty = 'Sedang';
        break;
      }
      case 'geometric_s_inf_sulit': {
        const a = getRandomInt(10, 50);
        const r_num = getRandomInt(1, 4);
        const r_den = getRandomInt(r_num + 1, 6); // r_den > r_num to ensure |r| < 1
        const r = r_num / r_den;
        const s_inf = a / (1 - r);
        question = `Tentukan jumlah tak hingga deret geometri dengan suku pertama ($a$) ${a} dan rasio ($r$) $\\frac{${r_num}}{${r_den}}$.`;
        correctAnswer = String(s_inf);
        solution = `Rumus jumlah tak hingga deret geometri adalah $S_\\infty = \\frac{a}{1-r}$, berlaku untuk $|r| < 1$.\nSubstitusikan $a = ${a}$ dan $r = \\frac{${r_num}}{${r_den}}$:\n$S_\\infty = \\frac{${a}}{1 - \\frac{${r_num}}{${r_den}}}$\n$S_\\infty = \\frac{${a}}{\\frac{${r_den} - ${r_num}}{${r_den}}}$\n$S_\\infty = ${a} \\cdot \\frac{${r_den}}{${r_den - r_num}}$\n$S_\\infty = ${s_inf}$.`;
        difficulty = 'Sulit';
        break;
      }
      case 'word_problem_sulit': {
        const initial = getRandomInt(10, 30) * 100; // Nilai awal contoh: populasi, uang
        const rate = getRandomInt(5, 15); // Tingkat persentase
        const years = getRandomInt(3, 6); // Jumlah periode
        const finalValue = initial * Math.pow((1 + rate / 100), years);
        question = `Sebuah populasi bakteri pada awalnya berjumlah ${initial} individu. Jika populasi tersebut bertumbuh ${rate}% setiap jam, berapa jumlah populasi bakteri setelah ${years} jam? (Bulatkan ke bilangan bulat terdekat)`;
        correctAnswer = String(Math.round(finalValue));
        solution = `Ini adalah masalah pertumbuhan eksponensial yang dapat dimodelkan sebagai barisan geometri.
Suku pertama ($a$) = ${initial}
Rasio ($r$) = $1 + \\frac{\\text{persentase pertumbuhan}}{100} = 1 + \\frac{${rate}}{100} = 1 + ${rate / 100} = ${1 + rate / 100}$
Jumlah jam ($n$) = ${years} (ini adalah suku ke-($n+1$) jika $n=0$ adalah awal, atau suku ke-$n$ jika $n=1$ adalah awal).
Jika $U_0$ adalah jumlah awal, maka setelah $n$ jam, jumlahnya adalah $U_n = U_0 \\cdot r^n$.
$U_{${years}} = ${initial} \\cdot (${1 + rate / 100})^{${years}}$
$U_{${years}} = ${initial} \\cdot ${Math.pow((1 + rate / 100), years).toFixed(4)}$
$U_{${years}} = ${finalValue.toFixed(2)}$
Dibulatkan ke bilangan bulat terdekat: ${Math.round(finalValue)}.`;
        difficulty = 'Sulit';
        break;
      }
      default:
        question = 'Pertanyaan tidak ditemukan.';
        correctAnswer = '';
        solution = '';
        difficulty = '';
    }
    return { question, correctAnswer, solution, difficulty };
  }, []); // Tidak ada dependensi, jadi hanya dibuat sekali

  /**
   * Menghasilkan set baru 5 soal unik saat komponen dimuat atau
   * saat tombol "Mulai Sesi Baru" diklik.
   */
  const generateNewQuiz = useCallback(() => {
    const newQuestions = [];
    while (newQuestions.length < 5) {
      const newQ = generateQuestion();
      // Memastikan keunikan (pemeriksaan sederhana berdasarkan teks soal)
      if (!newQuestions.some(q => q.question === newQ.question)) {
        newQuestions.push({ ...newQ, id: `q${newQuestions.length + 1}` });
      }
    }
    setQuestions(newQuestions);
    setCurrentQuestionIndex(0);
    setUserAnswer('');
    setFeedback('');
    setShowSolution(false);
    setQuizFinished(false);
    setCustomGeneratedQuestion(null); // Clear custom question when starting new quiz
  }, [generateQuestion]);

  // Efek untuk memuat skrip eksternal (MathJax dan Tailwind CSS CDN)
  useEffect(() => {
    // Memuat MathJax
    if (!document.getElementById('MathJax-script')) {
      const mathJaxScript = document.createElement('script');
      mathJaxScript.type = 'text/javascript';
      mathJaxScript.id = 'MathJax-script';
      mathJaxScript.async = true;
      mathJaxScript.src = 'https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js';
      document.head.appendChild(mathJaxScript);
    }

    // Memuat Tailwind CSS CDN
    if (!document.querySelector('script[src="https://cdn.tailwindcss.com"]')) {
      const tailwindCdnScript = document.createElement('script');
      tailwindCdnScript.src = 'https://cdn.tailwindcss.com';
      document.head.appendChild(tailwindCdnScript);

      // Konfigurasi Tailwind CSS setelah CDN dimuat
      tailwindCdnScript.onload = () => {
        // Hanya tambahkan config jika belum ada untuk menghindari duplikasi
        if (!window.tailwind || !window.tailwind.config) { // Cek keberadaan tailwind dan config
            const tailwindConfigScript = document.createElement('script');
            tailwindConfigScript.text = `
                tailwind.config = {
                  theme: {
                    extend: {
                      fontFamily: {
                        inter: ['Inter', 'sans-serif'],
                      },
                    },
                  },
                };
            `;
            document.head.appendChild(tailwindConfigScript);
        }
      };
    }
    
    // Tidak perlu fungsi cleanup untuk skrip global seperti CDN,
    // karena mereka seringkali dibutuhkan di seluruh siklus hidup aplikasi.
    // Jika komponen di-unmount, skrip ini mungkin masih dibutuhkan oleh elemen lain.
  }, []); // Array dependensi kosong berarti efek ini hanya berjalan sekali setelah render awal.


  useEffect(() => {
    generateNewQuiz();
  }, [generateNewQuiz]); // Menghasilkan soal saat pemuatan awal

  /**
   * Menangani perubahan input pengguna untuk jawaban.
   * @param {object} e - Objek event dari input.
   */
  const handleAnswerChange = (e) => {
    setUserAnswer(e.target.value);
    setFeedback(''); // Hapus umpan balik saat pengguna mengetik
    setShowSolution(false); // Sembunyikan pembahasan jika pengguna mengetik jawaban baru
  };

  /**
   * Memeriksa jawaban pengguna dibandingkan dengan jawaban yang benar.
   */
  const checkAnswer = () => {
    if (userAnswer.trim() === '') {
      setFeedback('Silakan masukkan jawaban Anda.');
      return;
    }

    const currentQ = customGeneratedQuestion || questions[currentQuestionIndex];
    if (!currentQ) return;

    // Normalisasi jawaban untuk perbandingan (misalnya, hapus spasi, huruf kecil untuk jawaban string, parseFloat untuk angka)
    const normalizedUserAnswer = userAnswer.trim().toLowerCase().replace(/,/, '.');
    const normalizedCorrectAnswer = currentQ.correctAnswer.trim().toLowerCase().replace(/,/, '.');

    // Coba parse sebagai float untuk perbandingan numerik, jika tidak, perbandingan string
    if (parseFloat(normalizedUserAnswer) === parseFloat(normalizedCorrectAnswer) && !isNaN(parseFloat(normalizedUserAnswer))) {
        setFeedback('Jawaban Anda benar! 🎉');
    } else if (normalizedUserAnswer === normalizedCorrectAnswer) { // Cadangan untuk kecocokan string eksak non-numerik
        setFeedback('Jawaban Anda benar! 🎉');
    } else {
        setFeedback('Jawaban Anda salah. Coba lagi atau lihat pembahasan.');
    }
  };

  /**
   * Pindah ke soal berikutnya atau selesaikan kuis.
   */
  const nextQuestion = () => {
    if (customGeneratedQuestion) { // Jika soal kustom ditampilkan, cukup hapus
      setCustomGeneratedQuestion(null);
      setUserAnswer('');
      setFeedback('');
      setShowSolution(false);
      return;
    }

    if (currentQuestionIndex < questions.length - 1) {
      setCurrentQuestionIndex(prevIndex => prevIndex + 1);
      setUserAnswer('');
      setFeedback('');
      setShowSolution(false);
    } else {
      setQuizFinished(true);
    }
  };

  /**
   * Menampilkan pembahasan untuk soal saat ini.
   */
  const toggleSolution = () => {
    setShowSolution(prev => !prev);
  };

  /**
   * Memanggil Gemini API untuk menghasilkan soal kustom.
   */
  const handleGenerateCustomQuestion = async () => {
    if (customQuestionPrompt.trim() === '') {
      setGeminiError('Masukkan perintah untuk soal kustom.');
      return;
    }

    setLoadingGemini(true);
    setGeminiError('');
    setCustomGeneratedQuestion(null);
    setUserAnswer('');
    setFeedback('');
    setShowSolution(false);

    try {
      let chatHistory = [];
      const prompt = `Buatkan soal matematika untuk siswa SMA tentang barisan dan deret. Soal harus dalam bahasa Indonesia. Berikan pertanyaan, jawaban yang benar, pembahasan rinci, dan tingkat kesulitan (Mudah, Sedang, atau Sulit) dalam format JSON sesuai skema berikut. Pastikan pembahasan menggunakan notasi LaTeX untuk rumus matematika. Contoh skema: {"question": "Pertanyaan soal...", "correctAnswer": "Jawaban benar", "solution": "Pembahasan rinci...", "difficulty": "Mudah"}.
      Perintah khusus: "${customQuestionPrompt}"`;

      chatHistory.push({ role: "user", parts: [{ text: prompt }] });
      const payload = {
        contents: chatHistory,
        generationConfig: {
          responseMimeType: "application/json",
          responseSchema: {
            type: "OBJECT",
            properties: {
              "question": { "type": "STRING" },
              "correctAnswer": { "type": "STRING" },
              "solution": { "type": "STRING" },
              "difficulty": { "type": "STRING" }
            },
            required: ["question", "correctAnswer", "solution", "difficulty"]
          }
        }
      };

      const apiKey = ""; // API Key akan disediakan oleh Canvas saat runtime
      const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

      const response = await fetch(apiUrl, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });

      const result = await response.json();

      if (result.candidates && result.candidates.length > 0 &&
          result.candidates[0].content && result.candidates[0].content.parts &&
          result.candidates[0].content.parts.length > 0) {
        const jsonText = result.candidates[0].content.parts[0].text;
        try {
          const parsedJson = JSON.parse(jsonText);
          if (parsedJson.question && parsedJson.correctAnswer && parsedJson.solution && parsedJson.difficulty) {
            setCustomGeneratedQuestion(parsedJson);
          } else {
            setGeminiError('Format respons dari Gemini tidak sesuai. Coba lagi.');
            console.error('Parsed JSON missing fields:', parsedJson);
          }
        } catch (parseError) {
          setGeminiError('Gagal memproses respons dari Gemini. Coba lagi.');
          console.error('Failed to parse JSON from Gemini:', jsonText, parseError);
        }
      } else {
        setGeminiError('Tidak ada respons dari Gemini. Coba lagi.');
        console.error('Gemini API response structure unexpected:', result);
      }
    } catch (apiError) {
      setGeminiError(`Terjadi kesalahan saat memanggil Gemini API: ${apiError.message}.`);
      console.error('Error calling Gemini API:', apiError);
    } finally {
      setLoadingGemini(false);
    }
  };


  // Render LaTeX menggunakan MathJax. Fungsi ini dipanggil setelah rendering
  useEffect(() => {
    if (window.MathJax) {
      window.MathJax.typesetPromise().then(() => {
        // MathJax typeset complete
      }).catch((err) => console.error('MathJax typesetting failed:', err));
    }
  }, [questions, currentQuestionIndex, showSolution, feedback, customGeneratedQuestion]); // Re-typeset saat state yang relevan berubah

  const displayQuestion = customGeneratedQuestion || questions[currentQuestionIndex];
  const isCustomQuestionActive = customGeneratedQuestion !== null;

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-500 to-purple-600 p-4 flex flex-col items-center justify-center font-inter">
      <div className="bg-white p-8 rounded-2xl shadow-xl max-w-2xl w-full text-center">
        <h1 className="text-4xl font-extrabold text-gray-800 mb-6 drop-shadow">
          Latihan Soal Matematika
        </h1>
        <h2 className="text-2xl font-semibold text-purple-700 mb-8">
          Barisan dan Deret (SMA)
        </h2>

        {quizFinished && !isCustomQuestionActive ? (
          <div className="text-center">
            <p className="text-2xl text-gray-700 mb-4">
              Selamat! Anda telah menyelesaikan semua soal.
            </p>
            <button
              onClick={generateNewQuiz}
              className="px-6 py-3 bg-indigo-600 text-white font-bold rounded-xl shadow-lg hover:bg-indigo-700 transition duration-300 ease-in-out transform hover:scale-105"
            >
              Mulai Sesi Baru
            </button>
          </div>
        ) : (
          questions.length > 0 && displayQuestion && (
            <div>
              <p className="text-lg text-gray-600 mb-2">
                {isCustomQuestionActive ? 'Soal Kustom' : `Soal ${currentQuestionIndex + 1} dari ${questions.length}`}
                <span className={`ml-3 px-3 py-1 rounded-full text-sm font-medium ${
                  displayQuestion.difficulty === 'Mudah' ? 'bg-green-100 text-green-800' :
                  displayQuestion.difficulty === 'Sedang' ? 'bg-yellow-100 text-yellow-800' :
                  'bg-red-100 text-red-800'
                }`}>
                  {displayQuestion.difficulty}
                </span>
              </p>
              <div className="mb-6 bg-gray-50 p-5 rounded-lg border border-gray-200 text-left">
                <p className="text-xl text-gray-800 leading-relaxed">
                  {/* Render the question (MathJax will process LaTeX) */}
                  {displayQuestion.question.split('\n').map((line, index) => (
                    <span key={index}>{line}<br/></span>
                  ))}
                </p>
              </div>

              <input
                type="text"
                value={userAnswer}
                onChange={handleAnswerChange}
                placeholder="Masukkan jawaban Anda..."
                className="w-full p-3 border-2 border-gray-300 rounded-xl mb-4 focus:outline-none focus:ring-2 focus:ring-purple-500 text-lg"
              />

              <div className="flex flex-col sm:flex-row justify-center gap-4 mb-4">
                <button
                  onClick={checkAnswer}
                  className="flex-1 px-6 py-3 bg-blue-600 text-white font-bold rounded-xl shadow-lg hover:bg-blue-700 transition duration-300 ease-in-out transform hover:scale-105"
                >
                  Cek Jawaban
                </button>
                <button
                  onClick={toggleSolution}
                  className="flex-1 px-6 py-3 bg-orange-500 text-white font-bold rounded-xl shadow-lg hover:bg-orange-600 transition duration-300 ease-in-out transform hover:scale-105"
                >
                  {showSolution ? 'Sembunyikan Pembahasan' : 'Lihat Pembahasan'}
                </button>
              </div>

              {feedback && (
                <p className={`mt-4 text-xl font-semibold ${
                  feedback.includes('benar') ? 'text-green-600' : 'text-red-600'
                }`}>
                  {feedback}
                </p>
              )}

              {showSolution && (
                <div className="mt-6 p-5 bg-purple-50 rounded-lg border-2 border-purple-200 text-left">
                  <h3 className="text-xl font-bold text-purple-800 mb-3">Pembahasan:</h3>
                  <p className="text-gray-700 leading-relaxed">
                    {/* Render the solution (MathJax will process LaTeX) */}
                    {displayQuestion.solution.split('\n').map((line, index) => (
                      <span key={index}>{line}<br/></span>
                    ))}
                  </p>
                  <p className="mt-4 text-md font-semibold text-gray-700">
                      Jawaban Benar: <span className="text-green-700">{displayQuestion.correctAnswer}</span>
                  </p>
                </div>
              )}

              <button
                onClick={nextQuestion}
                className="mt-6 w-full px-6 py-3 bg-purple-700 text-white font-bold rounded-xl shadow-lg hover:bg-purple-800 transition duration-300 ease-in-out transform hover:scale-105"
              >
                {isCustomQuestionActive ? 'Hapus Soal Kustom' : (currentQuestionIndex < questions.length - 1 ? 'Soal Selanjutnya' : 'Selesai Kuis')}
              </button>
            </div>
          )
        )}

        {/* Separator */}
        <div className="border-t-2 border-gray-200 my-8"></div>

        {/* Custom Question Generator Section */}
        <div className="mt-8 bg-white p-8 rounded-2xl shadow-xl max-w-2xl w-full text-center">
            <h3 className="text-2xl font-semibold text-teal-700 mb-6">
                ✨ Buat Soal Kustom dengan Gemini ✨
            </h3>
            <textarea
                value={customQuestionPrompt}
                onChange={(e) => setCustomQuestionPrompt(e.target.value)}
                placeholder="Contoh: 'Buatkan soal deret aritmatika sulit tentang pertumbuhan penduduk' atau 'Buatkan soal barisan geometri mudah'."
                rows="3"
                className="w-full p-3 border-2 border-gray-300 rounded-xl mb-4 focus:outline-none focus:ring-2 focus:ring-teal-500 text-lg"
            ></textarea>

            <button
                onClick={handleGenerateCustomQuestion}
                className="w-full px-6 py-3 bg-teal-600 text-white font-bold rounded-xl shadow-lg hover:bg-teal-700 transition duration-300 ease-in-out transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed"
                disabled={loadingGemini}
            >
                {loadingGemini ? 'Membuat Soal...' : 'Buat Soal ✨'}
            </button>

            {loadingGemini && (
              <div className="mt-4 text-teal-600 font-medium">
                Membuat soal, mohon tunggu...
              </div>
            )}

            {geminiError && (
              <p className="mt-4 text-red-600 font-semibold">
                {geminiError}
              </p>
            )}
        </div>
      </div>
    </div>
  );
};

export default App;
